/*
 * SIPRIMA Desa Tarabbi - Aduan Management Frame
 * Sistem Pengaduan Masyarakat Desa Tarabbi
 */
package aduan;

import Utils.DatabaseConfig;
import Utils.SessionManager;
import models.User;
import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import java.text.SimpleDateFormat;
import java.util.List;
import java.io.File;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableCellRenderer;

/**
 * @author febry
 */
public class FormAduanManajemen extends javax.swing.JFrame {
    
    // SIPRIMA Official Colors
    private static final Color PRIMARY_BLUE = new Color(41, 128, 185);
    private static final Color PRIMARY_GREEN = new Color(39, 174, 96);
    private static final Color ERROR_COLOR = new Color(231, 76, 60);
    private static final Color SUCCESS_COLOR = new Color(46, 204, 113);
    private static final Color WARNING_COLOR = new Color(243, 156, 18);
    private static final Color TEXT_PRIMARY = new Color(44, 62, 80);
    private static final Color TEXT_SECONDARY = new Color(127, 140, 141);
    private static final Color BG_PRIMARY = new Color(236, 240, 241);
    
    private User currentUser;
    private DefaultTableModel tableModel;
    
    // Icon caching for better performance
    private static final Map<String, ImageIcon> iconCache = new HashMap<>();
    private static final String ICON_PATH = "src/icons/";
    
    // Icon file names for status
    private static final String STATUS_BARU_ICON = "status_baru.png";
    private static final String STATUS_PROSES_ICON = "status_proses.png";
    private static final String STATUS_SELESAI_ICON = "status_selesai.png";
    private static final String STATUS_DITOLAK_ICON = "status_ditolak.png";
    
    // Icon file names for priority
    private static final String PRIORITY_RENDAH_ICON = "priority_rendah.png";
    private static final String PRIORITY_SEDANG_ICON = "priority_sedang.png";
    private static final String PRIORITY_TINGGI_ICON = "priority_tinggi.png";
    private static final String PRIORITY_DARURAT_ICON = "priority_darurat.png";

    /**
     * Creates new form FormAduanManajemen
     */
    public FormAduanManajemen() {
        initComponents();
        initializeCustomComponents();
    }
    
    /**
     * Creates new form FormAduanManajemen with user
     */
    public FormAduanManajemen(User user) {
        this.currentUser = user;
        initComponents();
        initializeCustomComponents();
        loadAduanData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        headerPanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        scrollPane = new javax.swing.JScrollPane();
        aduanTable = new javax.swing.JTable();
        buttonPanel = new javax.swing.JPanel();
        btnTambahAduan = new javax.swing.JButton();
        btnDetailAduan = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnTutup = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SIPRIMA - Manajemen Aduan");
        setResizable(true);

        headerPanel.setBackground(new java.awt.Color(41, 128, 185));
        headerPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 30, 20, 30));

        titleLabel.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(255, 255, 255));
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("MANAJEMEN ADUAN");

        javax.swing.GroupLayout headerPanelLayout = new javax.swing.GroupLayout(headerPanel);
        headerPanel.setLayout(headerPanelLayout);
        headerPanelLayout.setHorizontalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 740, Short.MAX_VALUE)
        );
        headerPanelLayout.setVerticalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
        );

        scrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Daftar Aduan"));

        aduanTable.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        aduanTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No. Aduan", "Judul", "Pelapor", "Kategori", "Status", "Prioritas", "Tanggal"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        aduanTable.setRowHeight(30);
        aduanTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        scrollPane.setViewportView(aduanTable);

        buttonPanel.setBackground(new java.awt.Color(236, 240, 241));
        buttonPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(15, 15, 15, 15));
        buttonPanel.setLayout(new java.awt.FlowLayout());

        btnTambahAduan.setBackground(new java.awt.Color(39, 174, 96));
        btnTambahAduan.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnTambahAduan.setForeground(new java.awt.Color(255, 255, 255));
        btnTambahAduan.setText("+ Tambah Aduan");
        btnTambahAduan.setBorder(javax.swing.BorderFactory.createEmptyBorder(8, 16, 8, 16));
        btnTambahAduan.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnTambahAduan.setFocusPainted(false);
        btnTambahAduan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahAduanActionPerformed(evt);
            }
        });
        buttonPanel.add(btnTambahAduan);

        btnDetailAduan.setBackground(new java.awt.Color(41, 128, 185));
        btnDetailAduan.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnDetailAduan.setForeground(new java.awt.Color(255, 255, 255));
        btnDetailAduan.setText("Detail Aduan");
        btnDetailAduan.setBorder(javax.swing.BorderFactory.createEmptyBorder(8, 16, 8, 16));
        btnDetailAduan.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDetailAduan.setFocusPainted(false);
        btnDetailAduan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetailAduanActionPerformed(evt);
            }
        });
        buttonPanel.add(btnDetailAduan);

        btnRefresh.setBackground(new java.awt.Color(127, 140, 141));
        btnRefresh.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnRefresh.setForeground(new java.awt.Color(255, 255, 255));
        btnRefresh.setText("Refresh");
        btnRefresh.setBorder(javax.swing.BorderFactory.createEmptyBorder(8, 16, 8, 16));
        btnRefresh.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRefresh.setFocusPainted(false);
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        buttonPanel.add(btnRefresh);

        btnTutup.setBackground(new java.awt.Color(231, 76, 60));
        btnTutup.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnTutup.setForeground(new java.awt.Color(255, 255, 255));
        btnTutup.setText("X Tutup");
        btnTutup.setBorder(javax.swing.BorderFactory.createEmptyBorder(8, 16, 8, 16));
        btnTutup.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnTutup.setFocusPainted(false);
        btnTutup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTutupActionPerformed(evt);
            }
        });
        buttonPanel.add(btnTutup);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(headerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(buttonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(headerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
        setExtendedState(JFrame.MAXIMIZED_BOTH);
    }// </editor-fold>//GEN-END:initComponents

    private void btnTambahAduanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahAduanActionPerformed
        openTambahAduan();
    }//GEN-LAST:event_btnTambahAduanActionPerformed

    private void btnDetailAduanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetailAduanActionPerformed
        openDetailAduan(aduanTable);
    }//GEN-LAST:event_btnDetailAduanActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        loadAduanData();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnTutupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTutupActionPerformed
        dispose();
    }//GEN-LAST:event_btnTutupActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormAduanManajemen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormAduanManajemen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormAduanManajemen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormAduanManajemen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormAduanManajemen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable aduanTable;
    private javax.swing.JButton btnDetailAduan;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnTambahAduan;
    private javax.swing.JButton btnTutup;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
    
    // Custom variables for back button
    private javax.swing.JButton btnKembali;
    
    /**
     * Initialize custom components after NetBeans GUI initialization
     */
    private void initializeCustomComponents() {
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
        // Initialize table model using existing table
        tableModel = (DefaultTableModel) aduanTable.getModel();
        
        // Set window size if not already set
        if (getWidth() < 800 || getHeight() < 600) {
            setSize(1000, 600);
        }
        
        // Add back button to header
        addBackButtonToHeader();
        
        // Set up custom cell renderers for status and priority columns
        setupCustomCellRenderers();
    }
    
    private JButton createButton(String text, Color bgColor) {
        JButton button = new JButton(text);
        button.setBackground(bgColor);
        button.setForeground(Color.WHITE);
        button.setFont(new Font("Segoe UI", Font.BOLD, 12));
        button.setBorder(BorderFactory.createEmptyBorder(8, 16, 8, 16));
        button.setFocusPainted(false);
        button.setCursor(new Cursor(Cursor.HAND_CURSOR));
        return button;
    }
    
    private void loadAduanData() {
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                // Clear existing data
                SwingUtilities.invokeLater(() -> tableModel.setRowCount(0));
                
                try {
                    AduanService service = AduanService.getInstance();
                    List<AduanService.AduanDTO> aduanList = service.getAllAduan();
                    
                    for (AduanService.AduanDTO aduan : aduanList) {
                        Object[] row = {
                            aduan.getComplaintNumber(),
                            aduan.getTitle(),
                            aduan.getReporterName(),
                            aduan.getCategory(),
                            getStatusDisplay(aduan.getStatus()),
                            getPriorityDisplay(aduan.getPriority()),
                            aduan.getCreatedAt()
                        };
                        
                        SwingUtilities.invokeLater(() -> tableModel.addRow(row));
                    }
                    
                } catch (SQLException e) {
                    SwingUtilities.invokeLater(() -> {
                        showError("Error loading data: " + e.getMessage());
                    });
                } catch (Exception e) {
                    SwingUtilities.invokeLater(() -> {
                        showError("Unexpected error: " + e.getMessage());
                    });
                }
                
                return null;
            }
            
            @Override
            protected void done() {
                // Update UI after loading is complete
                SwingUtilities.invokeLater(() -> {
                    aduanTable.revalidate();
                    aduanTable.repaint();
                });
            }
        };
        
        worker.execute();
    }
    
    private String getStatusDisplay(String status) {
        switch (status.toLowerCase()) {
            case "baru": return "[BARU] " + status;
            case "proses": return "[PROSES] " + status;
            case "selesai": return "[SELESAI] " + status;
            case "ditolak": return "[DITOLAK] " + status;
            default: return "[?] " + status;
        }
    }
    
    private String getPriorityDisplay(String priority) {
        switch (priority.toLowerCase()) {
            case "rendah": return "[RENDAH] " + priority;
            case "sedang": return "[SEDANG] " + priority;
            case "tinggi": return "[TINGGI] " + priority;
            case "darurat": return "[DARURAT] " + priority;
            default: return "[?] " + priority;
        }
    }
    
    private void openTambahAduan() {
        try {
            FormInputanAduan form = new FormInputanAduan(currentUser);
            form.setVisible(true);
            form.addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosed(WindowEvent e) {
                    loadAduanData(); // Refresh after adding
                }
            });
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                "Error opening form: " + e.getMessage(),
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void openDetailAduan(JTable aduanTable) {
        int selectedRow = aduanTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this,
                "Pilih aduan yang ingin dilihat \ndetailnya!",
                "Peringatan",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        String complaintNumber = (String) tableModel.getValueAt(selectedRow, 0);
        
        try {
            FormDetailAduan form = new FormDetailAduan(complaintNumber);
            form.setVisible(true);
            form.addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosed(WindowEvent e) {
                    loadAduanData(); // Refresh after viewing details
                }
            });
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                "Error opening detail: " + e.getMessage(),
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /**
     * Menampilkan pesan error dengan format yang konsisten
     */
    private void showError(String message) {
        JOptionPane.showMessageDialog(this,
            "Error: " + message,
            "Error",
            JOptionPane.ERROR_MESSAGE);
    }
    
    /**
     * Menampilkan pesan sukses dengan format yang konsisten
     */
    private void showSuccess(String message) {
        JOptionPane.showMessageDialog(this,
            "Success: " + message,
            "Sukses",
            JOptionPane.INFORMATION_MESSAGE);
    }
    
    /**
     * Load icon from file system or resources
     */
    private ImageIcon loadIcon(String iconFileName) {
        try {
            // Check cache first
            if (iconCache.containsKey(iconFileName)) {
                return iconCache.get(iconFileName);
            }
            
            ImageIcon icon = null;
            
            // Try to load from file system first
            File iconFile = new File(ICON_PATH + iconFileName);
            if (iconFile.exists()) {
                icon = new ImageIcon(iconFile.getPath());
            } else {
                // Try to load from resources
                URL resourceUrl = getClass().getResource("/icons/" + iconFileName);
                if (resourceUrl != null) {
                    icon = new ImageIcon(resourceUrl);
                }
            }
            
            // Scale the icon if it exists
            if (icon != null && icon.getIconWidth() > 0) {
                Image scaledImage = icon.getImage().getScaledInstance(16, 16, Image.SCALE_SMOOTH);
                icon = new ImageIcon(scaledImage);
                iconCache.put(iconFileName, icon);
            }
            
            return icon;
        } catch (Exception e) {
            System.err.println("Error loading icon: " + iconFileName + " - " + e.getMessage());
            return null;
        }
    }
    
    /**
     * Get status icon based on status value
     */
    private ImageIcon getStatusIcon(String status) {
        switch (status.toLowerCase()) {
            case "baru": return loadIcon(STATUS_BARU_ICON);
            case "proses": return loadIcon(STATUS_PROSES_ICON);
            case "selesai": return loadIcon(STATUS_SELESAI_ICON);
            case "ditolak": return loadIcon(STATUS_DITOLAK_ICON);
            default: return null;
        }
    }
    
    /**
     * Get priority icon based on priority value
     */
    private ImageIcon getPriorityIcon(String priority) {
        switch (priority.toLowerCase()) {
            case "rendah": return loadIcon(PRIORITY_RENDAH_ICON);
            case "sedang": return loadIcon(PRIORITY_SEDANG_ICON);
            case "tinggi": return loadIcon(PRIORITY_TINGGI_ICON);
            case "darurat": return loadIcon(PRIORITY_DARURAT_ICON);
            default: return null;
        }
    }
    
    /**
     * Get color based on status
     */
    private Color getStatusColor(String status) {
        switch (status.toLowerCase()) {
            case "baru": return PRIMARY_BLUE;
            case "proses": return WARNING_COLOR;
            case "selesai": return SUCCESS_COLOR;
            case "ditolak": return ERROR_COLOR;
            default: return TEXT_SECONDARY;
        }
    }
    
    /**
     * Get color based on priority
     */
    private Color getPriorityColor(String priority) {
        switch (priority.toLowerCase()) {
            case "rendah": return SUCCESS_COLOR;
            case "sedang": return WARNING_COLOR;
            case "tinggi": return new Color(230, 126, 34);
            case "darurat": return ERROR_COLOR;
            default: return TEXT_SECONDARY;
        }
    }
    
    /**
     * Custom cell renderer for status column
     */
    private class StatusCellRenderer extends DefaultTableCellRenderer {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            Component cell = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            
            if (value != null) {
                String statusText = value.toString();
                String cleanStatus = statusText.replaceAll("\\[.*?\\]\\s*", "").trim();
                
                // Set icon
                ImageIcon icon = getStatusIcon(cleanStatus);
                if (icon != null) {
                    setIcon(icon);
                } else {
                    setIcon(null);
                }
                
                // Set text color based on status
                if (!isSelected) {
                    setForeground(getStatusColor(cleanStatus));
                } else {
                    setForeground(table.getSelectionForeground());
                }
                
                // Set background color
                if (!isSelected) {
                    setBackground(Color.WHITE);
                } else {
                    setBackground(table.getSelectionBackground());
                }
                
                setFont(table.getFont().deriveFont(Font.BOLD));
            }
            
            return cell;
        }
    }
    
    /**
     * Custom cell renderer for priority column
     */
    private class PriorityCellRenderer extends DefaultTableCellRenderer {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            Component cell = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            
            if (value != null) {
                String priorityText = value.toString();
                String cleanPriority = priorityText.replaceAll("\\[.*?\\]\\s*", "").trim();
                
                // Set icon
                ImageIcon icon = getPriorityIcon(cleanPriority);
                if (icon != null) {
                    setIcon(icon);
                } else {
                    setIcon(null);
                }
                
                // Set text color based on priority
                if (!isSelected) {
                    setForeground(getPriorityColor(cleanPriority));
                } else {
                    setForeground(table.getSelectionForeground());
                }
                
                // Set background color
                if (!isSelected) {
                    setBackground(Color.WHITE);
                } else {
                    setBackground(table.getSelectionBackground());
                }
                
                setFont(table.getFont().deriveFont(Font.BOLD));
            }
            
            return cell;
        }
    }
    
    /**
     * Set up custom cell renderers for status and priority columns
     */
    private void setupCustomCellRenderers() {
        // Set custom renderer for status column (column index 4)
        aduanTable.getColumnModel().getColumn(4).setCellRenderer(new StatusCellRenderer());
        
        // Set custom renderer for priority column (column index 5)
        aduanTable.getColumnModel().getColumn(5).setCellRenderer(new PriorityCellRenderer());
    }
    
    /**
     * Menambahkan tombol kembali ke header panel
     */
    private void addBackButtonToHeader() {
        // Inisialisasi tombol kembali
        btnKembali = new JButton("<< Kembali");
        btnKembali.setBackground(new Color(52, 73, 94));
        btnKembali.setForeground(Color.WHITE);
        btnKembali.setFont(new Font("Segoe UI", Font.BOLD, 12));
        btnKembali.setBorder(BorderFactory.createEmptyBorder(8, 16, 8, 16));
        btnKembali.setFocusPainted(false);
        btnKembali.setCursor(new Cursor(Cursor.HAND_CURSOR));
        
        // Tambahkan aksi klik
        btnKembali.addActionListener(e -> {
            int option = JOptionPane.showConfirmDialog(this,
                "Apakah Anda yakin ingin kembali ke beranda?",
                "Konfirmasi",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);
            
            if (option == JOptionPane.YES_OPTION) {
                // Tutup form ini
                this.dispose();
                
                // Kembali ke dashboard berdasarkan role user
                if (currentUser != null) {
                    String role = currentUser.getRole().name().toLowerCase();
                    switch (role) {
                        case "petugas":
                            // Buka dashboard petugas
                            try {
                                dashboard.DashboardPetugas dashboardPetugas = new dashboard.DashboardPetugas(currentUser);
                                dashboardPetugas.setVisible(true);
                            } catch (Exception ex) {
                                showError("Error membuka dashboard petugas: " + ex.getMessage());
                            }
                            break;
                        case "supervisor":
                            // Buka dashboard supervisor
                            try {
                                dashboard.DashboardSuperVisor dashboardSupervisor = new dashboard.DashboardSuperVisor(currentUser);
                                dashboardSupervisor.setVisible(true);
                            } catch (Exception ex) {
                                showError("Error membuka dashboard supervisor: " + ex.getMessage());
                            }
                            break;
                        default:
                            // Buka dashboard default atau login
                            try {
                                Auth.FormLogin loginForm = new Auth.FormLogin();
                                loginForm.setVisible(true);
                            } catch (Exception ex) {
                                showError("Error membuka form login: " + ex.getMessage());
                            }
                            break;
                    }
                } else {
                    // Jika user null, kembali ke login
                    try {
                        Auth.FormLogin loginForm = new Auth.FormLogin();
                        loginForm.setVisible(true);
                    } catch (Exception ex) {
                        showError("Error membuka form login: " + ex.getMessage());
                    }
                }
            }
        });
        
        // Ubah layout header panel untuk menambahkan tombol kembali
        headerPanel.setLayout(new BorderLayout());
        headerPanel.add(btnKembali, BorderLayout.WEST);
        headerPanel.add(titleLabel, BorderLayout.CENTER);
        
        // Tambahkan margin untuk tombol kembali
        btnKembali.setPreferredSize(new Dimension(100, 40));
        
        // Refresh header panel
        headerPanel.revalidate();
        headerPanel.repaint();
    }
}
