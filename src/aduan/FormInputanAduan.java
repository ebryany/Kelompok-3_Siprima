/*
 * SIPRIMA Desa Tarabbi - Form Input Aduan
 * Sistem Pengaduan Masyarakat Desa Tarabbi
 */
package aduan;

import Utils.DatabaseConfig;
import Utils.SessionManager;
import models.User;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.sql.*;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.event.DocumentListener;
import javax.swing.event.DocumentEvent;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

/**
 * @author febry
 */
public class FormInputanAduan extends javax.swing.JFrame {
    
    // SIPRIMA Official Colors
    private static final Color PRIMARY_BLUE = new Color(41, 128, 185);         // #2980B9
    private static final Color PRIMARY_GREEN = new Color(39, 174, 96);         // #27AE60
    private static final Color SECONDARY_ORANGE = new Color(230, 126, 34);     // #E67E22
    private static final Color ERROR_COLOR = new Color(231, 76, 60);           // #E74C3C
    private static final Color SUCCESS_COLOR = new Color(46, 204, 113);        // #2ECC71
    private static final Color WARNING_COLOR = new Color(243, 156, 18);        // #F39C12
    private static final Color TEXT_PRIMARY = new Color(44, 62, 80);           // #2C3E50
    private static final Color TEXT_SECONDARY = new Color(127, 140, 141);      // #7F8C8D
    private static final Color BORDER_COLOR = new Color(220, 221, 225);        // #DCDDE1
    private static final Color BG_PRIMARY = new Color(236, 240, 241);          // #ECF0F1
    
    private User currentUser;
    private File selectedFile;
    private String selectedPriority = "rendah";
    
    // Form validation state
    private boolean isNamaValid = false;
    private boolean isNIKValid = false;
    private boolean isHPValid = false;
    private boolean isEmailValid = false;
    private boolean isJudulValid = false;
    private boolean isDeskripsiValid = false;
    
    // Progress indicator
    private JProgressBar formProgressBar;
    private JLabel progressLabel;
    
    // Validation icons
    private final String VALID_ICON = "✅";
    private final String INVALID_ICON = "❌";
    private final String PENDING_ICON = "⏳";

    /**
     * Creates new form FormInputanAduan
     */
    public FormInputanAduan() {
        this(null);
    }
    
    /**
     * Creates new form with user context
     */
    public FormInputanAduan(User user) {
        this.currentUser = user;
        initComponents();
        setupEventHandlers();
        setupWindowProperties();
        customizeModernComponents();
        setupFormDefaults();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        priorityButtonGroup = new javax.swing.ButtonGroup();
        headerPanel = new javax.swing.JPanel();
        btnBack = new javax.swing.JButton();
        titleLabel = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        btnDraft = new javax.swing.JButton();
        mainContentPanel = new javax.swing.JPanel();
        formPanel = new javax.swing.JPanel();
        formTitleLabel = new javax.swing.JLabel();
        reporterSectionLabel = new javax.swing.JLabel();
        txtNamaLengkap = new javax.swing.JTextField();
        txtNIK = new javax.swing.JTextField();
        txtNoHP = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtAlamat = new javax.swing.JTextField();
        txtRtRw = new javax.swing.JTextField();
        aduanSectionLabel = new javax.swing.JLabel();
        cmbKategori = new javax.swing.JComboBox<>();
        priorityLabel = new javax.swing.JLabel();
        priorityPanel = new javax.swing.JPanel();
        rbRendah = new javax.swing.JRadioButton();
        rbSedang = new javax.swing.JRadioButton();
        rbTinggi = new javax.swing.JRadioButton();
        rbDarurat = new javax.swing.JRadioButton();
        txtLokasiKejadian = new javax.swing.JTextField();
        txtJudulAduan = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDeskripsi = new javax.swing.JTextArea();
        btnPilihFile = new javax.swing.JButton();
        lblSelectedFile = new javax.swing.JLabel();
        actionPanel = new javax.swing.JPanel();
        btnBatal = new javax.swing.JButton();
        btnSimpanDraft = new javax.swing.JButton();
        btnKirim = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SIPRIMA - Input Aduan Baru");

        headerPanel.setBackground(new java.awt.Color(41, 128, 185));
        headerPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 30, 20, 30));
        headerPanel.setPreferredSize(new java.awt.Dimension(900, 80));

        btnBack.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnBack.setForeground(new java.awt.Color(41, 128, 185));
        btnBack.setText("< Kembali");
        btnBack.setBorder(javax.swing.BorderFactory.createEmptyBorder(8, 16, 8, 16));
        btnBack.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBack.setFocusPainted(false);

        titleLabel.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(255, 255, 255));
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("INPUT ADUAN BARU");

        btnSave.setBackground(new java.awt.Color(39, 174, 96));
        btnSave.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnSave.setForeground(new java.awt.Color(255, 255, 255));
        btnSave.setText("Kirim Aduan");
        btnSave.setBorder(javax.swing.BorderFactory.createEmptyBorder(6, 12, 6, 12));
        btnSave.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSave.setFocusPainted(false);

        btnDraft.setBackground(new java.awt.Color(127, 140, 141));
        btnDraft.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnDraft.setForeground(new java.awt.Color(255, 255, 255));
        btnDraft.setText("Simpan Draft");
        btnDraft.setBorder(javax.swing.BorderFactory.createEmptyBorder(6, 12, 6, 12));
        btnDraft.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDraft.setFocusPainted(false);

        javax.swing.GroupLayout headerPanelLayout = new javax.swing.GroupLayout(headerPanel);
        headerPanel.setLayout(headerPanelLayout);
        headerPanelLayout.setHorizontalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPanelLayout.createSequentialGroup()
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDraft, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        headerPanelLayout.setVerticalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPanelLayout.createSequentialGroup()
                .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(titleLabel, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(headerPanelLayout.createSequentialGroup()
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDraft, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
        );

        mainContentPanel.setBackground(new java.awt.Color(236, 240, 241));
        mainContentPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(30, 50, 30, 50));

        formPanel.setBackground(new java.awt.Color(255, 255, 255));
        formPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(220, 221, 225)), javax.swing.BorderFactory.createEmptyBorder(40, 40, 40, 40)));
        formPanel.setPreferredSize(new java.awt.Dimension(800, 1500)); // Increased size for better visibility

        formTitleLabel.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        formTitleLabel.setForeground(new java.awt.Color(41, 128, 185));
        formTitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        formTitleLabel.setText("FORMULIR ADUAN MASYARAKAT");

        reporterSectionLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        reporterSectionLabel.setForeground(new java.awt.Color(41, 128, 185));
        reporterSectionLabel.setText("DATA PELAPOR");

        txtNamaLengkap.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtNamaLengkap.setText("Nama Lengkap");
        txtNamaLengkap.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(220, 221, 225)), javax.swing.BorderFactory.createEmptyBorder(12, 16, 12, 16)));
        txtNamaLengkap.setPreferredSize(new java.awt.Dimension(450, 50)); // Increased size

        txtNIK.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtNIK.setText("NIK (16 digit)");
        txtNIK.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(220, 221, 225)), javax.swing.BorderFactory.createEmptyBorder(12, 16, 12, 16)));
        txtNIK.setPreferredSize(new java.awt.Dimension(450, 50)); // Increased size

        txtNoHP.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtNoHP.setText("No. HP");
        txtNoHP.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(220, 221, 225)), javax.swing.BorderFactory.createEmptyBorder(12, 16, 12, 16)));
        txtNoHP.setPreferredSize(new java.awt.Dimension(450, 50)); // Increased size

        txtEmail.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtEmail.setText("Email");
        txtEmail.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(220, 221, 225)), javax.swing.BorderFactory.createEmptyBorder(12, 16, 12, 16)));
        txtEmail.setPreferredSize(new java.awt.Dimension(450, 50)); // Increased size

        txtAlamat.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtAlamat.setText("Alamat Lengkap");
        txtAlamat.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(220, 221, 225)), javax.swing.BorderFactory.createEmptyBorder(12, 16, 12, 16)));
        txtAlamat.setPreferredSize(new java.awt.Dimension(450, 50)); // Increased size

        txtRtRw.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtRtRw.setText("RT/RW");
        txtRtRw.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(220, 221, 225)), javax.swing.BorderFactory.createEmptyBorder(12, 16, 12, 16)));
        txtRtRw.setPreferredSize(new java.awt.Dimension(450, 50)); // Increased size

        aduanSectionLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        aduanSectionLabel.setForeground(new java.awt.Color(41, 128, 185));
        aduanSectionLabel.setText("DETAIL ADUAN");

        cmbKategori.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cmbKategori.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pilih Kategori", "Infrastruktur", "Kebersihan", "Utilitas", "Keamanan" }));
        cmbKategori.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(220, 221, 225)), javax.swing.BorderFactory.createEmptyBorder(8, 12, 8, 12)));
        cmbKategori.setPreferredSize(new java.awt.Dimension(450, 50)); // Increased size

        priorityLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        priorityLabel.setForeground(new java.awt.Color(127, 140, 141));
        priorityLabel.setText("Prioritas:");

        priorityPanel.setBackground(new java.awt.Color(255, 255, 255));

        rbRendah.setBackground(new java.awt.Color(255, 255, 255));
        priorityButtonGroup.add(rbRendah);
        rbRendah.setForeground(new java.awt.Color(127, 140, 141));
        rbRendah.setSelected(true);
        rbRendah.setText("Rendah");
        rbRendah.setFocusPainted(false);

        rbSedang.setBackground(new java.awt.Color(255, 255, 255));
        priorityButtonGroup.add(rbSedang);
        rbSedang.setForeground(new java.awt.Color(127, 140, 141));
        rbSedang.setText("Sedang");
        rbSedang.setFocusPainted(false);

        rbTinggi.setBackground(new java.awt.Color(255, 255, 255));
        priorityButtonGroup.add(rbTinggi);
        rbTinggi.setForeground(new java.awt.Color(127, 140, 141));
        rbTinggi.setText("Tinggi");
        rbTinggi.setFocusPainted(false);

        rbDarurat.setBackground(new java.awt.Color(255, 255, 255));
        priorityButtonGroup.add(rbDarurat);
        rbDarurat.setForeground(new java.awt.Color(127, 140, 141));
        rbDarurat.setText("Darurat");
        rbDarurat.setFocusPainted(false);

        javax.swing.GroupLayout priorityPanelLayout = new javax.swing.GroupLayout(priorityPanel);
        priorityPanel.setLayout(priorityPanelLayout);
        priorityPanelLayout.setHorizontalGroup(
            priorityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(priorityPanelLayout.createSequentialGroup()
                .addComponent(rbRendah, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbSedang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbTinggi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbDarurat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        priorityPanelLayout.setVerticalGroup(
            priorityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(priorityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(rbRendah, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(rbSedang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(rbTinggi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(rbDarurat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        txtLokasiKejadian.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtLokasiKejadian.setText("Lokasi Kejadian");
        txtLokasiKejadian.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(220, 221, 225)), javax.swing.BorderFactory.createEmptyBorder(12, 16, 12, 16)));
        txtLokasiKejadian.setPreferredSize(new java.awt.Dimension(450, 50)); // Increased size

        txtJudulAduan.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtJudulAduan.setText("Judul Aduan");
        txtJudulAduan.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(220, 221, 225)), javax.swing.BorderFactory.createEmptyBorder(12, 16, 12, 16)));
        txtJudulAduan.setPreferredSize(new java.awt.Dimension(450, 50)); // Increased size

        txtDeskripsi.setColumns(20);
        txtDeskripsi.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtDeskripsi.setLineWrap(true);
        txtDeskripsi.setRows(4);
        txtDeskripsi.setText("Deskripsi lengkap aduan Anda...");
        txtDeskripsi.setWrapStyleWord(true);
        txtDeskripsi.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        jScrollPane1.setViewportView(txtDeskripsi);

        btnPilihFile.setBackground(new java.awt.Color(230, 126, 34));
        btnPilihFile.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnPilihFile.setForeground(new java.awt.Color(255, 255, 255));
        btnPilihFile.setText("Pilih File Lampiran");
        btnPilihFile.setBorder(javax.swing.BorderFactory.createEmptyBorder(12, 20, 12, 20));
        btnPilihFile.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnPilihFile.setFocusPainted(false);

        lblSelectedFile.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        lblSelectedFile.setForeground(new java.awt.Color(127, 140, 141));
        lblSelectedFile.setText("Belum ada file dipilih");

        actionPanel.setBackground(new java.awt.Color(255, 255, 255));

        btnBatal.setBackground(new java.awt.Color(231, 76, 60));
        btnBatal.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnBatal.setForeground(new java.awt.Color(255, 255, 255));
        btnBatal.setText("Batal");
        btnBatal.setBorder(javax.swing.BorderFactory.createEmptyBorder(12, 20, 12, 20));
        btnBatal.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBatal.setFocusPainted(false);

        btnSimpanDraft.setBackground(new java.awt.Color(127, 140, 141));
        btnSimpanDraft.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnSimpanDraft.setForeground(new java.awt.Color(255, 255, 255));
        btnSimpanDraft.setText("Simpan Draft");
        btnSimpanDraft.setBorder(javax.swing.BorderFactory.createEmptyBorder(12, 20, 12, 20));
        btnSimpanDraft.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSimpanDraft.setFocusPainted(false);

        btnKirim.setBackground(new java.awt.Color(39, 174, 96));
        btnKirim.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnKirim.setForeground(new java.awt.Color(255, 255, 255));
        btnKirim.setText("Kirim Aduan");
        btnKirim.setBorder(javax.swing.BorderFactory.createEmptyBorder(12, 20, 12, 20));
        btnKirim.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnKirim.setFocusPainted(false);

        javax.swing.GroupLayout actionPanelLayout = new javax.swing.GroupLayout(actionPanel);
        actionPanel.setLayout(actionPanelLayout);
        actionPanelLayout.setHorizontalGroup(
            actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(actionPanelLayout.createSequentialGroup()
                .addComponent(btnBatal, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSimpanDraft, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnKirim, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        actionPanelLayout.setVerticalGroup(
            actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(btnBatal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btnSimpanDraft, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btnKirim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout formPanelLayout = new javax.swing.GroupLayout(formPanel);
        formPanel.setLayout(formPanelLayout);
        formPanelLayout.setHorizontalGroup(
            formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(formTitleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(reporterSectionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(txtNamaLengkap, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(txtNIK, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(txtNoHP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(txtEmail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(txtAlamat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(txtRtRw, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(aduanSectionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(cmbKategori, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(priorityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(priorityPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(txtLokasiKejadian, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(txtJudulAduan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnPilihFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblSelectedFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(actionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        formPanelLayout.setVerticalGroup(
            formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formPanelLayout.createSequentialGroup()
                .addComponent(formTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(reporterSectionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtNamaLengkap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtNIK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtNoHP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtAlamat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtRtRw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(aduanSectionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbKategori, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(priorityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(priorityPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtLokasiKejadian, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtJudulAduan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnPilihFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSelectedFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(actionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout mainContentPanelLayout = new javax.swing.GroupLayout(mainContentPanel);
        mainContentPanel.setLayout(mainContentPanelLayout);
        mainContentPanelLayout.setHorizontalGroup(
            mainContentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainContentPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(formPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mainContentPanelLayout.setVerticalGroup(
            mainContentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainContentPanelLayout.createSequentialGroup()
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(formPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        // Tambahkan scroll pane untuk main content
        JScrollPane mainScrollPane = new JScrollPane(mainContentPanel);
        mainScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        mainScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        mainScrollPane.setBorder(null);
        mainScrollPane.getVerticalScrollBar().setUnitIncrement(16);
        
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(headerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(mainScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(headerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormInputanAduan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormInputanAduan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormInputanAduan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormInputanAduan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new FormInputanAduan().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel actionPanel;
    private javax.swing.JLabel aduanSectionLabel;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnBatal;
    private javax.swing.JButton btnDraft;
    private javax.swing.JButton btnKirim;
    private javax.swing.JButton btnPilihFile;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSimpanDraft;
    private javax.swing.JComboBox<String> cmbKategori;
    private javax.swing.JPanel formPanel;
    private javax.swing.JLabel formTitleLabel;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblSelectedFile;
    private javax.swing.JPanel mainContentPanel;
    private javax.swing.ButtonGroup priorityButtonGroup;
    private javax.swing.JLabel priorityLabel;
    private javax.swing.JPanel priorityPanel;
    private javax.swing.JRadioButton rbDarurat;
    private javax.swing.JRadioButton rbRendah;
    private javax.swing.JRadioButton rbSedang;
    private javax.swing.JRadioButton rbTinggi;
    private javax.swing.JLabel reporterSectionLabel;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JTextField txtAlamat;
    private javax.swing.JTextArea txtDeskripsi;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtJudulAduan;
    private javax.swing.JTextField txtLokasiKejadian;
    private javax.swing.JTextField txtNIK;
    private javax.swing.JTextField txtNamaLengkap;
    private javax.swing.JTextField txtNoHP;
    private javax.swing.JTextField txtRtRw;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Setup window properties
     */
    private void setupWindowProperties() {
        setTitle("SIPRIMA Desa Tarabbi - Input Aduan Baru");
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setExtendedState(JFrame.MAXIMIZED_BOTH); // Fullscreen untuk responsive
        setMinimumSize(new Dimension(1200, 800));
        
        // Setup scroll behavior untuk smooth scrolling
        if (mainContentPanel != null) {
            Component parent = mainContentPanel.getParent().getParent();
            if (parent instanceof JScrollPane) {
                JScrollPane scrollPane = (JScrollPane) parent;
                if (scrollPane != null) {
                    scrollPane.getVerticalScrollBar().setUnitIncrement(16);
                    scrollPane.getHorizontalScrollBar().setUnitIncrement(16);
                    scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
                    scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
                }
            }
        }
    }
    
    /**
     * Customize components dengan SIPRIMA theme
     */
    private void customizeModernComponents() {
        // Header styling
        headerPanel.setBackground(PRIMARY_BLUE);
        
        // Title
        titleLabel.setText("📝 INPUT ADUAN BARU");
        titleLabel.setFont(new Font("Segoe UI", Font.BOLD, 24));
        titleLabel.setForeground(Color.WHITE);
        titleLabel.setHorizontalAlignment(SwingConstants.CENTER);
        
        // Header buttons
        customizeHeaderButton(btnBack, "← Kembali", Color.WHITE);
        customizeHeaderButton(btnSave, "📤 Kirim", PRIMARY_GREEN);
        customizeHeaderButton(btnDraft, "💾 Draft", TEXT_SECONDARY);
        
        // Main content
        mainContentPanel.setBackground(BG_PRIMARY);
        
        // Form styling
        styleFormComponents();
        
        // Action buttons
        styleActionButtons();
    }
    
    private void customizeHeaderButton(JButton button, String text, Color bgColor) {
        button.setText(text);
        button.setBackground(bgColor);
        if (bgColor == Color.WHITE) {
            button.setForeground(PRIMARY_BLUE);
        } else {
            button.setForeground(Color.WHITE);
        }
        button.setFont(new Font("Segoe UI", Font.BOLD, 12));
        button.setBorder(BorderFactory.createEmptyBorder(8, 16, 8, 16));
        button.setFocusPainted(false);
        button.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }
    
    private void styleFormComponents() {
        // Form title
        formTitleLabel.setFont(new Font("Segoe UI", Font.BOLD, 20));
        formTitleLabel.setForeground(PRIMARY_BLUE);
        
        // Section labels
        reporterSectionLabel.setFont(new Font("Segoe UI", Font.BOLD, 16));
        reporterSectionLabel.setForeground(PRIMARY_BLUE);
        
        aduanSectionLabel.setFont(new Font("Segoe UI", Font.BOLD, 16));
        aduanSectionLabel.setForeground(PRIMARY_BLUE);
        
        // Style text fields with placeholder effect
        styleTextField(txtNamaLengkap, "Masukkan nama lengkap Anda");
        styleTextField(txtNIK, "Masukkan NIK 16 digit");
        styleTextField(txtNoHP, "Masukkan nomor HP aktif");
        styleTextField(txtEmail, "Masukkan email aktif");
        styleTextField(txtAlamat, "Masukkan alamat lengkap");
        styleTextField(txtRtRw, "Contoh: 01/02");
        styleTextField(txtLokasiKejadian, "Masukkan lokasi kejadian");
        styleTextField(txtJudulAduan, "Masukkan judul aduan singkat");
        
        // Style text area
        txtDeskripsi.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        txtDeskripsi.setForeground(TEXT_SECONDARY);
        
        // Style combo box
        cmbKategori.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        
        // Style radio buttons
        Font radioFont = new Font("Segoe UI", Font.PLAIN, 14);
        rbRendah.setFont(radioFont);
        rbSedang.setFont(radioFont);
        rbTinggi.setFont(radioFont);
        rbDarurat.setFont(radioFont);
        
        // Style file button
        btnPilihFile.setBackground(SECONDARY_ORANGE);
        btnPilihFile.setForeground(Color.WHITE);
        btnPilihFile.setFont(new Font("Segoe UI", Font.BOLD, 14));
        
        // Selected file label
        lblSelectedFile.setFont(new Font("Segoe UI", Font.ITALIC, 12));
        lblSelectedFile.setForeground(TEXT_SECONDARY);
    }
    
    private void styleTextField(JTextField textField, String placeholder) {
        textField.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        textField.setForeground(TEXT_SECONDARY);
        
        // Add focus listeners for placeholder effect
        textField.addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                if (textField.getText().equals(placeholder) || isPlaceholderText(textField.getText())) {
                    textField.setText("");
                    textField.setForeground(TEXT_PRIMARY);
                }
            }
            
            @Override
            public void focusLost(FocusEvent e) {
                if (textField.getText().trim().isEmpty()) {
                    textField.setText(placeholder);
                    textField.setForeground(TEXT_SECONDARY);
                }
            }
        });
        
        // Set initial placeholder
        textField.setText(placeholder);
    }
    
    
    private void styleActionButtons() {
        // Style action buttons
        btnBatal.setBackground(ERROR_COLOR);
        btnBatal.setForeground(Color.WHITE);
        btnBatal.setFont(new Font("Segoe UI", Font.BOLD, 14));
        btnBatal.setFocusPainted(false);
        btnBatal.setCursor(new Cursor(Cursor.HAND_CURSOR));
        
        btnSimpanDraft.setBackground(TEXT_SECONDARY);
        btnSimpanDraft.setForeground(Color.WHITE);
        btnSimpanDraft.setFont(new Font("Segoe UI", Font.BOLD, 14));
        btnSimpanDraft.setFocusPainted(false);
        btnSimpanDraft.setCursor(new Cursor(Cursor.HAND_CURSOR));
        
        btnKirim.setBackground(PRIMARY_GREEN);
        btnKirim.setForeground(Color.WHITE);
        btnKirim.setFont(new Font("Segoe UI", Font.BOLD, 14));
        btnKirim.setFocusPainted(false);
        btnKirim.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }
    
    /**
     * Setup form defaults
     */
    private void setupFormDefaults() {
        // Pre-fill user data if logged in - WITH NULL CHECKS
        if (currentUser != null) {
            String fullName = currentUser.getFullName();
            if (fullName != null && !fullName.trim().isEmpty()) {
                txtNamaLengkap.setText(fullName);
                txtNamaLengkap.setForeground(TEXT_PRIMARY);
            }
            
            String email = currentUser.getEmail();
            if (email != null && !email.trim().isEmpty()) {
                txtEmail.setText(email);
                txtEmail.setForeground(TEXT_PRIMARY);
            }
            
            // Add other user fields if available with null checks
            String phone = currentUser.getPhone();
            if (phone != null && !phone.trim().isEmpty()) {
                txtNoHP.setText(phone);
                txtNoHP.setForeground(TEXT_PRIMARY);
            }
            
            String address = currentUser.getAddress();
            if (address != null && !address.trim().isEmpty()) {
                txtAlamat.setText(address);
                txtAlamat.setForeground(TEXT_PRIMARY);
            }
            
            String rtRw = currentUser.getRtRw();
            if (rtRw != null && !rtRw.trim().isEmpty()) {
                txtRtRw.setText(rtRw);
                txtRtRw.setForeground(TEXT_PRIMARY);
            }
        }
        
        // Setup text area placeholder
        txtDeskripsi.addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                if (txtDeskripsi.getText().equals("Deskripsi lengkap aduan Anda...")) {
                    txtDeskripsi.setText("");
                    txtDeskripsi.setForeground(TEXT_PRIMARY);
                }
            }
            
            @Override
            public void focusLost(FocusEvent e) {
                if (txtDeskripsi.getText().trim().isEmpty()) {
                    txtDeskripsi.setText("Deskripsi lengkap aduan Anda...");
                    txtDeskripsi.setForeground(TEXT_SECONDARY);
                }
            }
        });
    }
    
    /**
     * Setup event handlers
     */
    private void setupEventHandlers() {
        btnBack.addActionListener(e -> handleBack());
        btnBatal.addActionListener(e -> handleCancel());
        btnSimpanDraft.addActionListener(e -> handleSaveDraft());
        btnKirim.addActionListener(e -> handleSubmit());
        btnSave.addActionListener(e -> handleSubmit());
        btnDraft.addActionListener(e -> handleSaveDraft());
        btnPilihFile.addActionListener(e -> handleSelectFile());
        
        // Priority selection handlers
        rbRendah.addActionListener(e -> selectedPriority = "rendah");
        rbSedang.addActionListener(e -> selectedPriority = "sedang");
        rbTinggi.addActionListener(e -> selectedPriority = "tinggi");
        rbDarurat.addActionListener(e -> selectedPriority = "darurat");
        
        // Setup real-time validation
        setupRealTimeValidation();
        
        // Setup progress tracking
        setupProgressTracking();
    }
    
    private void handleBack() {
        int option = JOptionPane.showConfirmDialog(this,
            "Apakah Anda yakin ingin keluar?\nData yang belum disimpan akan hilang.",
            "Konfirmasi Keluar",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE);
            
        if (option == JOptionPane.YES_OPTION) {
            this.dispose();
        }
    }
    
    private void handleCancel() {
        handleBack();
    }
    
    private void handleSelectFile() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Pilih File Lampiran");
        
        // Set file filters
        FileNameExtensionFilter imageFilter = new FileNameExtensionFilter(
            "File Gambar (*.jpg, *.png, *.jpeg)", "jpg", "png", "jpeg");
        FileNameExtensionFilter documentFilter = new FileNameExtensionFilter(
            "File Dokumen (*.pdf, *.doc, *.docx)", "pdf", "doc", "docx");
            
        fileChooser.addChoosableFileFilter(imageFilter);
        fileChooser.addChoosableFileFilter(documentFilter);
        fileChooser.setFileFilter(imageFilter);
        
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            selectedFile = fileChooser.getSelectedFile();
            
            // Check file size (max 5MB)
double fileSizeInMB = (double) selectedFile.length() / (1024.0 * 1024.0);
            if (fileSizeInMB > 5) {
                JOptionPane.showMessageDialog(this,
                    "⚠️ Ukuran file terlalu besar!\nMaksimal ukuran file adalah 5MB.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
                selectedFile = null;
                lblSelectedFile.setText("Belum ada file dipilih");
                return;
            }
            
            lblSelectedFile.setText("📎 " + selectedFile.getName() + " (" + String.format("%.2f", fileSizeInMB) + " MB)");
            lblSelectedFile.setForeground(PRIMARY_BLUE);
        }
    }
    
    private void handleSaveDraft() {
        if (!validateBasicForm()) {
            return;
        }
        
        try {
            saveComplaint("draft");
            JOptionPane.showMessageDialog(this,
                "💾 Draft aduan berhasil disimpan!\nAnda dapat melanjutkan pengisian nanti.",
                "Draft Disimpan",
                JOptionPane.INFORMATION_MESSAGE);
                
        } catch (SQLException e) {
            System.err.println("Error saving draft: " + e.getMessage());
            showError("Error menyimpan draft: " + e.getMessage());
        }
    }
    
    private void handleSubmit() {
        if (!validateCompleteForm()) {
            return;
        }
        
        try {
            saveComplaint("baru");
            JOptionPane.showMessageDialog(this,
                "✅ Aduan berhasil dikirim!\n\n" +
                "📧 Konfirmasi akan dikirim ke email Anda.\n" +
                "📱 Anda dapat memantau status aduan di dashboard.",
                "Aduan Berhasil Dikirim",
                JOptionPane.INFORMATION_MESSAGE);
                
            this.dispose();
            
        } catch (SQLException e) {
            System.err.println("Error submitting complaint: " + e.getMessage());
            showError("Error mengirim aduan: " + e.getMessage());
        }
    }
    
    private boolean validateBasicForm() {
        StringBuilder errors = new StringBuilder();
        
        if (isFieldEmpty(txtNamaLengkap)) {
            errors.append("• Nama lengkap harus diisi\n");
        }
        
        if (isFieldEmpty(txtNIK)) {
            errors.append("• NIK harus diisi\n");
} else if (!txtNIK.getText().matches("^\\d{16}$")) {
            errors.append("• NIK harus 16 digit angka\n");
        }
        
        if (isFieldEmpty(txtEmail)) {
            errors.append("• Email harus diisi\n");
        } else if (!isValidEmail(txtEmail.getText())) {
            errors.append("• Format email tidak valid\n");
        }
        
        if (errors.length() > 0) {
            JOptionPane.showMessageDialog(this,
                "⚠️ Mohon perbaiki kesalahan berikut:\n\n" + errors.toString(),
                "Validasi Error",
                JOptionPane.WARNING_MESSAGE);
            return false;
        }
        
        return true;
    }
    
    private boolean validateCompleteForm() {
        if (!validateBasicForm()) {
            return false;
        }
        
        StringBuilder errors = new StringBuilder();
        
        if (isFieldEmpty(txtAlamat)) {
            errors.append("• Alamat lengkap harus diisi\n");
        }
        
        if (cmbKategori.getSelectedItem() == null || cmbKategori.getSelectedIndex() <= 0) {
            errors.append("• Kategori aduan harus dipilih\n");
        }
        
        if (isFieldEmpty(txtLokasiKejadian)) {
            errors.append("• Lokasi kejadian harus diisi\n");
        }
        
        if (isFieldEmpty(txtJudulAduan)) {
            errors.append("• Judul aduan harus diisi\n");
        }
        
        if (txtDeskripsi.getText().trim().isEmpty() || 
            txtDeskripsi.getText().equals("Deskripsi lengkap aduan Anda...")) {
            errors.append("• Deskripsi aduan harus diisi\n");
        }
        
        if (errors.length() > 0) {
            JOptionPane.showMessageDialog(this,
                "⚠️ Mohon lengkapi data berikut:\n\n" + errors.toString(),
                "Validasi Error",
                JOptionPane.WARNING_MESSAGE);
            return false;
        }
        
        return true;
    }
    
    private boolean isFieldEmpty(JTextField field) {
        return field.getText().trim().isEmpty() || isPlaceholderText(field.getText());
    }
    
    private boolean isValidEmail(String email) {
        return email.matches("^[A-Za-z0-9+_.-]+@(.+)$");
    }
    
    private void saveComplaint(String status) throws SQLException {
        Connection conn = DatabaseConfig.getConnection();
        
        System.out.println("💾 Saving complaint to database...");
        
        // Check if table exists and has correct structure
        try {
            if (!isTableStructureCorrect(conn)) {
                System.out.println("🔧 Table structure incorrect, fixing...");
                dropAndRecreateTable(conn);
            }
        } catch (SQLException e) {
            System.out.println("⚠️ Warning checking/creating table: " + e.getMessage());
            // Continue anyway, maybe table already exists with correct structure
        }
        
        String query = "INSERT INTO complaints (reporter_name, reporter_nik, reporter_email, reporter_phone, " +
                      "reporter_address, rt_rw, category, priority, location_address, title, description, " +
                      "status, created_at, complaint_number) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), ?)"; 
        
        try (PreparedStatement stmt = conn.prepareStatement(query, Statement.RETURN_GENERATED_KEYS)) {
            stmt.setString(1, getFieldValue(txtNamaLengkap));
            stmt.setString(2, getFieldValue(txtNIK));
            stmt.setString(3, getFieldValue(txtEmail));
            stmt.setString(4, getFieldValue(txtNoHP));
            stmt.setString(5, getFieldValue(txtAlamat));
            stmt.setString(6, getFieldValue(txtRtRw));
            // FIX: Add null check for combo box selection
            Object selectedCategory = cmbKategori.getSelectedItem();
            stmt.setString(7, selectedCategory != null ? selectedCategory.toString() : "Infrastruktur");
            stmt.setString(8, selectedPriority);
            stmt.setString(9, getFieldValue(txtLokasiKejadian));
            stmt.setString(10, getFieldValue(txtJudulAduan));
            stmt.setString(11, txtDeskripsi.getText().equals("Deskripsi lengkap aduan Anda...") ? "" : txtDeskripsi.getText().trim());
            stmt.setString(12, status);
            
            // Generate complaint number
            String complaintNumber = generateComplaintNumber();
            stmt.setString(13, complaintNumber);
            
            stmt.executeUpdate();
            
            System.out.println("✅ Aduan berhasil disimpan dengan nomor: " + complaintNumber);
            
            // Get generated ID for file attachment if needed
            if (selectedFile != null) {
                ResultSet rs = stmt.getGeneratedKeys();
                if (rs.next()) {
                    int complaintId = rs.getInt(1);
                    saveAttachment(complaintId);
                }
            }
        }
    }
    
    /**
     * Drop and recreate table to fix typos
     */
    private void dropAndRecreateTable(Connection conn) throws SQLException {
        System.out.println("🔧 Fixing database table structure...");
        
        // Disable foreign key checks temporarily
        try (Statement stmt = conn.createStatement()) {
            stmt.executeUpdate("SET FOREIGN_KEY_CHECKS = 0");
            System.out.println("🔓 Foreign key checks disabled");
        }
        
        // Drop related tables first
        try (Statement stmt = conn.createStatement()) {
            stmt.executeUpdate("DROP TABLE IF EXISTS complaint_logs");
            stmt.executeUpdate("DROP TABLE IF EXISTS attachments");
            stmt.executeUpdate("DROP TABLE IF EXISTS complaints");
            System.out.println("🗑️ Old tables dropped");
        }
        
        // Create new table with correct structure
        createComplaintsTable(conn);
        
        // Re-enable foreign key checks
        try (Statement stmt = conn.createStatement()) {
            stmt.executeUpdate("SET FOREIGN_KEY_CHECKS = 1");
            System.out.println("🔒 Foreign key checks re-enabled");
        }
    }
    
    /**
     * Create complaints table jika belum ada
     */
    private void createComplaintsTable(Connection conn) throws SQLException {
        String createTableQuery = """
            CREATE TABLE complaints (
                id INT PRIMARY KEY AUTO_INCREMENT,
                complaint_number VARCHAR(50) UNIQUE NOT NULL,
                reporter_name VARCHAR(100) NOT NULL,
                reporter_nik VARCHAR(20) NOT NULL,
                reporter_email VARCHAR(100) NOT NULL,
                reporter_phone VARCHAR(20),
                reporter_address TEXT,
                rt_rw VARCHAR(10),
                category VARCHAR(50) NOT NULL,
                priority ENUM('rendah', 'sedang', 'tinggi', 'darurat') DEFAULT 'sedang',
                status ENUM('baru', 'validasi', 'proses', 'selesai', 'ditolak') DEFAULT 'baru',
                location_address TEXT NOT NULL,
                title VARCHAR(200) NOT NULL,
                description TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
            )
        """;
        
        try (Statement stmt = conn.createStatement()) {
            stmt.executeUpdate(createTableQuery);
            System.out.println("✅ Tabel complaints berhasil dibuat dengan struktur yang benar");
        }
    }
    
    /**
     * Check if table structure is correct
     */
    private boolean isTableStructureCorrect(Connection conn) throws SQLException {
        try {
            // Test if we can query the table with correct field name
            String testQuery = "SELECT reporter_name FROM complaints LIMIT 1";
            try (Statement stmt = conn.createStatement();
                 ResultSet rs = stmt.executeQuery(testQuery)) {
                // If we get here, table structure is correct
                System.out.println("✅ Table structure verified - 'reporter_name' field exists");
                return true;
            }
        } catch (SQLException e) {
            if (e.getMessage().contains("reporter_name") || 
                e.getMessage().contains("doesn't exist") ||
                e.getMessage().contains("Unknown column")) {
                System.out.println("❌ Table structure incorrect: " + e.getMessage());
                return false;
            }
            // Other errors - rethrow
            throw e;
        }
    }
    
    /**
     * Get field value dengan handling placeholder
     */
    private String getFieldValue(JTextField field) {
        String value = field.getText().trim();
        if (isPlaceholderText(value)) {
            return "";
        }
        return value;
    }
    
    private String generateComplaintNumber() {
        LocalDateTime now = LocalDateTime.now();
        String dateTime = now.format(DateTimeFormatter.ofPattern("yyyyMMddHHmmss"));
        return "ADU" + dateTime;
    }
    
    private void saveAttachment(int complaintId) {
        // Implementation for saving file attachment
        // This would typically involve copying the file to a secure location
        // and saving the file path in the database
        System.out.println("Saving attachment for complaint ID: " + complaintId);
        System.out.println("File: " + selectedFile.getAbsolutePath());
    }
    
    private void showError(String message) {
        JOptionPane.showMessageDialog(this,
            "❌ " + message,
            "Error",
            JOptionPane.ERROR_MESSAGE);
    }
    
    /**
     * Check if text is placeholder text
     */
    private boolean isPlaceholderText(String text) {
        String[] placeholders = {
            "Nama Lengkap", "NIK (16 digit)", "No. HP", "Email", 
            "Alamat lengkap", "RT/RW", "Lokasi kejadian", "Judul aduan",
            "Deskripsi lengkap aduan Anda..."
        };
        
        for (String placeholder : placeholders) {
            if (placeholder.equals(text)) {
                return true;
            }
        }
        return false;
    }
    
    /**
     * Setup real-time validation for all form fields
     */
    private void setupRealTimeValidation() {
        // Validation icons - add them next to each field
        
        // Real-time validation for Nama Lengkap
        txtNamaLengkap.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) { validateNamaLengkap(); }
            @Override
            public void removeUpdate(DocumentEvent e) { validateNamaLengkap(); }
            @Override
            public void changedUpdate(DocumentEvent e) { validateNamaLengkap(); }
        });
        
        // Real-time validation for NIK
        txtNIK.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) { validateNIK(); }
            @Override
            public void removeUpdate(DocumentEvent e) { validateNIK(); }
            @Override
            public void changedUpdate(DocumentEvent e) { validateNIK(); }
        });
        
        // Real-time validation for No. HP
        txtNoHP.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) { validateNoHP(); }
            @Override
            public void removeUpdate(DocumentEvent e) { validateNoHP(); }
            @Override
            public void changedUpdate(DocumentEvent e) { validateNoHP(); }
        });
        
        // Real-time validation for Email
        txtEmail.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) { validateEmail(); }
            @Override
            public void removeUpdate(DocumentEvent e) { validateEmail(); }
            @Override
            public void changedUpdate(DocumentEvent e) { validateEmail(); }
        });
        
        // Real-time validation for Judul Aduan
        txtJudulAduan.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) { validateJudul(); }
            @Override
            public void removeUpdate(DocumentEvent e) { validateJudul(); }
            @Override
            public void changedUpdate(DocumentEvent e) { validateJudul(); }
        });
        
        // Real-time validation for Deskripsi
        txtDeskripsi.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) { validateDeskripsi(); }
            @Override
            public void removeUpdate(DocumentEvent e) { validateDeskripsi(); }
            @Override
            public void changedUpdate(DocumentEvent e) { validateDeskripsi(); }
        });
    }
    
    /**
     * Setup progress tracking for form completion
     */
    private void setupProgressTracking() {
        // Create progress bar
        formProgressBar = new JProgressBar(0, 100);
        formProgressBar.setStringPainted(true);
        formProgressBar.setString("Progress: 0%");
        formProgressBar.setForeground(PRIMARY_GREEN);
        formProgressBar.setBackground(BG_PRIMARY);
        formProgressBar.setBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));
        
        // Create progress label
        progressLabel = new JLabel("Mulai isi formulir untuk melihat progress");
        progressLabel.setFont(new Font("Segoe UI", Font.ITALIC, 12));
        progressLabel.setForeground(TEXT_SECONDARY);
        
        // Add progress components to header (replace existing buttons if needed)
        // You can add this to the header panel or create a dedicated progress panel
        updateFormProgress();
    }
    
    /**
     * Update form completion progress
     */
    private void updateFormProgress() {
        SwingUtilities.invokeLater(() -> {
            int completedFields = 0;
            int totalFields = 6; // Nama, NIK, HP, Email, Judul, Deskripsi
            
            if (isNamaValid) completedFields++;
            if (isNIKValid) completedFields++;
            if (isHPValid) completedFields++;
            if (isEmailValid) completedFields++;
            if (isJudulValid) completedFields++;
            if (isDeskripsiValid) completedFields++;
            
            int progress = (completedFields * 100) / totalFields;
            
            if (formProgressBar != null) {
                formProgressBar.setValue(progress);
                formProgressBar.setString("Progress: " + progress + "% (" + completedFields + "/" + totalFields + ")");
                
                // Change color based on progress
                if (progress < 30) {
                    formProgressBar.setForeground(ERROR_COLOR);
                } else if (progress < 70) {
                    formProgressBar.setForeground(WARNING_COLOR);
                } else {
                    formProgressBar.setForeground(SUCCESS_COLOR);
                }
            }
            
            if (progressLabel != null) {
                if (progress == 100) {
                    progressLabel.setText("🎉 Formulir lengkap! Siap untuk dikirim.");
                    progressLabel.setForeground(SUCCESS_COLOR);
                } else if (progress > 50) {
                    progressLabel.setText("👍 Hampir selesai! Lengkapi beberapa field lagi.");
                    progressLabel.setForeground(WARNING_COLOR);
                } else {
                    progressLabel.setText("📝 Mulai isi formulir untuk melihat progress");
                    progressLabel.setForeground(TEXT_SECONDARY);
                }
            }
        });
    }
    
    // Individual field validation methods
    
    private void validateNamaLengkap() {
        String nama = txtNamaLengkap.getText().trim();
        
        if (!isPlaceholderText(nama) && !nama.isEmpty() && nama.length() >= 3) {
            isNamaValid = true;
            updateFieldValidation(txtNamaLengkap, true, "Nama lengkap valid");
        } else {
            isNamaValid = false;
            if (!isPlaceholderText(nama) && !nama.isEmpty()) {
                updateFieldValidation(txtNamaLengkap, false, "Nama terlalu pendek (min 3 karakter)");
            } else {
                updateFieldValidation(txtNamaLengkap, null, null);
            }
        }
        updateFormProgress();
    }
    
    private void validateNIK() {
        String nik = txtNIK.getText().trim();
        
        if (!isPlaceholderText(nik) && !nik.isEmpty()) {
            if (nik.matches("^\\d{16}$")) {
                isNIKValid = true;
                updateFieldValidation(txtNIK, true, "NIK valid");
            } else {
                isNIKValid = false;
                updateFieldValidation(txtNIK, false, "NIK harus 16 digit angka");
            }
        } else {
            isNIKValid = false;
            updateFieldValidation(txtNIK, null, null);
        }
        updateFormProgress();
    }
    
    private void validateNoHP() {
        String hp = txtNoHP.getText().trim();
        
        if (!isPlaceholderText(hp) && !hp.isEmpty()) {
            if (hp.matches("^(\\+62|0)\\d{9,12}$")) {
                isHPValid = true;
                updateFieldValidation(txtNoHP, true, "Nomor HP valid");
            } else {
                isHPValid = false;
                updateFieldValidation(txtNoHP, false, "Format nomor HP tidak valid");
            }
        } else {
            isHPValid = false;
            updateFieldValidation(txtNoHP, null, null);
        }
        updateFormProgress();
    }
    
    private void validateEmail() {
        String email = txtEmail.getText().trim();
        
        if (!isPlaceholderText(email) && !email.isEmpty()) {
            if (isValidEmail(email)) {
                isEmailValid = true;
                updateFieldValidation(txtEmail, true, "Email valid");
            } else {
                isEmailValid = false;
                updateFieldValidation(txtEmail, false, "Format email tidak valid");
            }
        } else {
            isEmailValid = false;
            updateFieldValidation(txtEmail, null, null);
        }
        updateFormProgress();
    }
    
    private void validateJudul() {
        String judul = txtJudulAduan.getText().trim();
        
        if (!isPlaceholderText(judul) && !judul.isEmpty() && judul.length() >= 10) {
            isJudulValid = true;
            updateFieldValidation(txtJudulAduan, true, "Judul aduan valid");
        } else {
            isJudulValid = false;
            if (!isPlaceholderText(judul) && !judul.isEmpty()) {
                updateFieldValidation(txtJudulAduan, false, "Judul terlalu pendek (min 10 karakter)");
            } else {
                updateFieldValidation(txtJudulAduan, null, null);
            }
        }
        updateFormProgress();
    }
    
    private void validateDeskripsi() {
        String deskripsi = txtDeskripsi.getText().trim();
        
        if (!deskripsi.equals("Deskripsi lengkap aduan Anda...") && !deskripsi.isEmpty() && deskripsi.length() >= 20) {
            isDeskripsiValid = true;
            // Note: JTextArea doesn't have tooltip like JTextField, so we'll update status differently
            txtDeskripsi.setBorder(BorderFactory.createLineBorder(SUCCESS_COLOR, 2));
        } else {
            isDeskripsiValid = false;
            if (!deskripsi.equals("Deskripsi lengkap aduan Anda...") && !deskripsi.isEmpty()) {
                txtDeskripsi.setBorder(BorderFactory.createLineBorder(ERROR_COLOR, 2));
            } else {
                txtDeskripsi.setBorder(BorderFactory.createLineBorder(BORDER_COLOR, 1));
            }
        }
        updateFormProgress();
    }
    
    /**
     * Update field validation visual feedback
     * @param field The text field to update
     * @param isValid true if valid, false if invalid, null if neutral
     * @param message Tooltip message
     */
    private void updateFieldValidation(JTextField field, Boolean isValid, String message) {
        if (isValid == null) {
            // Neutral state
            field.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(BORDER_COLOR, 1),
                BorderFactory.createEmptyBorder(12, 16, 12, 16)
            ));
            field.setToolTipText(null);
        } else if (isValid) {
            // Valid state
            field.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(SUCCESS_COLOR, 2),
                BorderFactory.createEmptyBorder(12, 16, 12, 16)
            ));
            field.setToolTipText(VALID_ICON + " " + message);
        } else {
            // Invalid state
            field.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(ERROR_COLOR, 2),
                BorderFactory.createEmptyBorder(12, 16, 12, 16)
            ));
            field.setToolTipText(INVALID_ICON + " " + message);
        }
    }
}

